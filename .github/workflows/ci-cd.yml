name: Repository Migration CI/CD

on:
  push:
    branches: [ develop, feature/* ]
    paths:
      - 'repomigration/**'
      - 'repomigration.tests/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'repomigration/**'
      - 'repomigration.tests/**'
  workflow_dispatch:
    inputs:
      run_migration:
        description: 'Run actual migration after build'
        required: false
        default: false
        type: boolean
      config_file:
        description: 'Configuration file to use for migration'
        required: false
        default: 'configs/migration-config.yaml'
        type: string
      version_override:
        description: 'Override version (e.g., 1.2.3)'
        required: false
        type: string

env:
  DOTNET_VERSION: '8.0.x'
  PROJECT_PATH: './repomigration'
  TEST_PROJECT_PATH: './repomigration.tests'
  SOLUTION_PATH: './repomigration.sln'
  CONFIG_PATH: './configs'

jobs:
  # Job 0: Calculate Version
  calculate-version:
    name: Calculate Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      semver: ${{ steps.version.outputs.semver }}
      assembly-version: ${{ steps.version.outputs.assembly-version }}
      file-version: ${{ steps.version.outputs.file-version }}
      informational-version: ${{ steps.version.outputs.informational-version }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for GitVersion
    
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.10.2
      with:
        versionSpec: '5.x'
    
    - name: Calculate Version with GitVersion
      id: gitversion
      uses: gittools/actions/gitversion/execute@v0.10.2
      with:
        useConfigFile: true
        configFilePath: 'GitVersion.yml'
    
    - name: Set Version Output
      id: version
      run: |
        # Use manual version override if provided
        if [ -n "${{ github.event.inputs.version_override }}" ]; then
          VERSION="${{ github.event.inputs.version_override }}"
          echo "Using manual version override: $VERSION"
        # Use tag version if this is a tag push
        elif [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "Using tag version: $VERSION"
        # Use GitVersion for other cases
        else
          VERSION="${{ steps.gitversion.outputs.semVer }}"
          echo "Using GitVersion: $VERSION"
        fi
        
        # Set all version outputs
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "semver=$VERSION" >> $GITHUB_OUTPUT
        echo "assembly-version=${{ steps.gitversion.outputs.assemblySemVer }}" >> $GITHUB_OUTPUT
        echo "file-version=${{ steps.gitversion.outputs.assemblySemFileVer }}" >> $GITHUB_OUTPUT
        echo "informational-version=$VERSION+${{ steps.gitversion.outputs.sha }}" >> $GITHUB_OUTPUT
        
        echo "Calculated versions:"
        echo "  Version: $VERSION"
        echo "  Assembly Version: ${{ steps.gitversion.outputs.assemblySemVer }}"
        echo "  File Version: ${{ steps.gitversion.outputs.assemblySemFileVer }}"
        echo "  Informational Version: $VERSION+${{ steps.gitversion.outputs.sha }}"

  # Job 1: Build and Test
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: calculate-version
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for better Git operations
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
    
    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_PATH }}
    
    - name: Build solution with version
      run: |
        dotnet build ${{ env.SOLUTION_FILE }} \
          --configuration Release \
          --no-restore \
          -p:Version=${{ needs.calculate-version.outputs.version }} \
          -p:AssemblyVersion=${{ needs.calculate-version.outputs.assembly-version }} \
          -p:FileVersion=${{ needs.calculate-version.outputs.file-version }} \
          -p:InformationalVersion="${{ needs.calculate-version.outputs.informational-version }}"

    - name: Run unit tests
      run: |
        dotnet test ${{ env.TEST_PROJECT_PATH }} \
          --configuration Release \
          --no-build \
          --verbosity normal \
          --logger trx \
          --results-directory TestResults/ \
          --collect:"XPlat Code Coverage"
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: TestResults/
    
    - name: Upload code coverage
      uses: codecov/codecov-action@v4
      if: always()
      with:
        directory: TestResults/
        flags: unittests
        name: codecov-umbrella
    
    - name: Publish application with version
      run: |
        dotnet publish ${{ env.PROJECT_PATH }} \
          --configuration Release \
          --output ./publish \
          --no-build \
          -p:Version=${{ needs.calculate-version.outputs.version }} \
          -p:AssemblyVersion=${{ needs.calculate-version.outputs.assembly-version }} \
          -p:FileVersion=${{ needs.calculate-version.outputs.file-version }} \
          -p:InformationalVersion="${{ needs.calculate-version.outputs.informational-version }}"

    - name: Copy configs folder to publish directory
      run: |
        if [ -d "${{ env.CONFIG_PATH }}" ]; then
          echo "Copying configs folder to publish directory..."
          cp -r ${{ env.CONFIG_PATH }} ./publish/
          echo "Contents of publish directory:"
          ls -la ./publish/
          echo "Contents of configs in publish directory:"
          ls -la ./publish/configs/
        else
          echo "Warning: configs folder not found at ${{ env.CONFIG_PATH }}"
          exit 1
        fi
    - name: Create version info file
      run: |
        cat > ./publish/version.json << EOF
        {
          "version": "${{ needs.calculate-version.outputs.version }}",
          "semver": "${{ needs.calculate-version.outputs.semver }}",
          "assemblyVersion": "${{ needs.calculate-version.outputs.assembly-version }}",
          "fileVersion": "${{ needs.calculate-version.outputs.file-version }}",
          "informationalVersion": "${{ needs.calculate-version.outputs.informational-version }}",
          "buildDate": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
          "commit": "${{ github.sha }}",
          "branch": "${{ github.ref_name }}"
        }
        EOF
        
        echo "Version info created:"
        cat ./publish/version.json

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: published-app-${{ needs.calculate-version.outputs.version }}
        path: ./publish/
# Job 2: Security Scan
  # security-scan:
  #   name: Security Scan
  #   runs-on: ubuntu-latest
  #   needs: build-and-test
    
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4
    
  #   - name: Setup .NET
  #     uses: actions/setup-dotnet@v4
  #     with:
  #       dotnet-version: ${{ env.DOTNET_VERSION }}
    
  #   - name: Restore dependencies
  #     run: dotnet restore ${{ env.SOLUTION_PATH }}
    
  #   - name: Run security audit
  #     run: dotnet list package --vulnerable --include-transitive
    
  #   - name: Run CodeQL Analysis
  #     uses: github/codeql-action/init@v3
  #     with:
  #       languages: csharp
    
  #   - name: Build for CodeQL
  #     run: dotnet build ${{ env.SOLUTION_PATH }} --configuration Release
    
  #   - name: Perform CodeQL Analysis
  #     uses: github/codeql-action/analyze@v3  

# Job 4: Migration Execution (Manual Trigger Only)
  run-migration:
    name: Execute Migration
    runs-on: ubuntu-latest
    needs: [calculate-version, build-and-test]
    # if: github.event.inputs.run_migration == 'true'
    #environment: production  # Requires manual approval
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Setup Git
      run: |
        git config --global user.name "GitHub Actions Bot"
        git config --global user.email "actions@github.com"
        git config --global init.defaultBranch main
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: published-app-${{ needs.calculate-version.outputs.version }}
        path: ./publish
    
    # - name: Verify downloaded artifacts and configs
    #   run: |
    #     echo "=== Downloaded Artifacts ==="
    #     ls -la ./published-app-${{ needs.calculate-version.outputs.version }}/
    #     echo ""
    #     echo "=== Config Directory Structure ==="
    #     if [ -d "./published-app-${{ needs.calculate-version.outputs.version }}/configs" ]; then
    #       find ./published-app-${{ needs.calculate-version.outputs.version }}/configs -type f
    #       echo ""
    #       echo "=== Config Files Content Preview ==="
    #       for config_file in ./published-app-${{ needs.calculate-version.outputs.version }}/configs/*.yaml; do
    #         if [ -f "$config_file" ]; then
    #           echo "--- $(basename $config_file) ---"
    #           head -10 "$config_file" 2>/dev/null || echo "Cannot read $config_file"
    #           echo ""
    #         fi
    #       done
    #     else
    #       echo "ERROR: configs directory not found in downloaded artifacts!"
    #       exit 1
    #     fi
    - name: Make executable
      run: chmod +x ./publish/repomigration
    - name: Display version information
      run: |
        echo "Running Repository Migration Tool"
        echo "Version: ${{ needs.calculate-version.outputs.version }}"
        echo "Build Info:"
        cat ./publish/version.json
    
    # - name: Validate configuration file
    #   run: |
    #     if [ ! -f "${{ github.event.inputs.config_file }}" ]; then
    #       echo "Error: Configuration file not found: ${{ github.event.inputs.config_file }}"
    #       exit 1
    #     fi
    #     echo "Using configuration file: ${{ github.event.inputs.config_file }}"
    
    - name: Validate configuration
      run: |
        echo "=== Validating Migration Configuration ==="
        
        # Set config path for the application to use
        export CONFIG_DIRECTORY="./published-app-${{ needs.calculate-version.outputs.version }}/configs"
        
        # Check if main config file exists
        MAIN_CONFIG="$CONFIG_DIRECTORY/migration-config.yaml"
        if [ ! -f "$MAIN_CONFIG" ]; then
          echo "ERROR: Main configuration file not found at $MAIN_CONFIG"
          echo "Available config files:"
          ls -la $CONFIG_DIRECTORY/ 2>/dev/null || echo "No config directory found"
          exit 1
        fi
        
        echo "✓ Configuration validation passed"
        echo "Using config directory: $CONFIG_DIRECTORY"
  
    - name: Run migration (dry-run first)
      run: |
        echo "This would execute: ./published-app-${{ needs.calculate-version.outputs.version }}/repomigration ${{ github.event.inputs.config_file }}"
        echo "Configuration file content:"
        cat "${{ github.event.inputs.config_file }}"
        # Note: Actual migration execution is commented out for safety
        # Uncomment the next line to run actual migration
        # ./publish/repomigration "${{ github.event.inputs.config_file }}"
  
    - name: Upload migration logs
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: migration-logs-${{ needs.calculate-version.outputs.version }}
        path: |
          *.log
          migration-*.log
